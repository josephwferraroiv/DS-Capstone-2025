# -*- coding: utf-8 -*-
"""proof of testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gEgy5l-NnQd_IQSPHLb6Gj2-Pj5cfOVv
"""

import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier

def test_labels():
    import pandas as pd
    df = pd.DataFrame({'Price': [100, 102, 101, 99, 97, 105]})
    df['Forward_5d_Return'] = (df['Price'].shift(-5) - df['Price']) / df['Price']

    def label_return(r):
        if r > 0.02:
            return 1
        elif r < -0.02:
            return -1
        else:
            return 0

    df['Label'] = df['Forward_5d_Return'].apply(label_return)

    print("Test DataFrame:")
    print(df)

    expected_label_0 = 1  # From 100 to 105 = +5%
    expected_label_1 = 0  # Will be NaN return, so label = 0

    print("\nExpected Label at index 0:", expected_label_0)
    print("Actual Label at index 0:", df['Label'].iloc[0])
    print("PASS" if df['Label'].iloc[0] == expected_label_0 else "FAIL")

    print("\nExpected Label at index 1:", expected_label_1)
    print("Actual Label at index 1:", df['Label'].iloc[1])
    print("PASS" if df['Label'].iloc[1] == expected_label_1 else "FAIL")

test_labels()

def test_technical_indicators():
    import pandas as pd
    import numpy as np
    data = list(range(1, 21))  # 1 to 20
    df = pd.DataFrame({'Price': data})

    df['SMA_20'] = df['Price'].rolling(window=20).mean()
    df['Momentum_10'] = df['Price'] - df['Price'].shift(10)

    print("\nTechnical Indicators DataFrame:")
    print(df)

    expected_sma = sum(range(1, 21)) / 20
    actual_sma = df['SMA_20'].iloc[-1]
    print("\nExpected SMA_20 at last row:", expected_sma)
    print("Actual SMA_20 at last row:", actual_sma)
    print("PASS" if np.isclose(actual_sma, expected_sma) else "FAIL")

    expected_momentum = 20 - 10
    actual_momentum = df['Momentum_10'].iloc[-1]
    print("\nExpected Momentum_10 at last row:", expected_momentum)
    print("Actual Momentum_10 at last row:", actual_momentum)
    print("PASS" if actual_momentum == expected_momentum else "FAIL")

test_technical_indicators()

def test_random_forest_predict():
    import pandas as pd
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.metrics import accuracy_score

    # Sample synthetic dataset
    df = pd.DataFrame({
        'SMA_20': [1.2, 1.5, 1.3, 1.4, 1.6],
        'Momentum_10': [0.1, 0.2, -0.1, 0.05, -0.2],
        'Volatility_10': [0.5, 0.6, 0.4, 0.55, 0.45],
        'Label': [1, 0, -1, 1, 0]
    })

    features = ['SMA_20', 'Momentum_10', 'Volatility_10']
    X = df[features]
    y = df['Label']

    clf = RandomForestClassifier(n_estimators=10, random_state=42)
    clf.fit(X, y)
    predictions = clf.predict(X)

    accuracy = accuracy_score(y, predictions)

    print("\nRandom Forest Test DataFrame:")
    print(df)
    print("\nPredictions:", predictions)
    print("Accuracy:", accuracy)
    print("PASS" if accuracy >= 0.6 else "FAIL")

test_random_forest_predict()